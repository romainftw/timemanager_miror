/*
 *  Warning: Do not edit this file.
 *  Auto-generated by 'beam_makeops'.
 */

case op_aligned_label_Lt: {
  emit_aligned_label(args[0], args[1]);
  break;
}

case op_allocate_heap_tIt: {
  emit_allocate_heap(args[0], args[1], args[2]);
  break;
}

case op_allocate_tt: {
  emit_allocate(args[0], args[1]);
  break;
}

case op_append_cons_Is: {
  emit_append_cons(args[0], args[1]);
  break;
}

case op_apply_last_tt: {
  emit_apply_last(args[0], args[1]);
  break;
}

case op_apply_t: {
  emit_apply(args[0]);
  break;
}

case op_badmatch_s: {
  emit_badmatch(args[0]);
  break;
}

case op_badrecord_s: {
  emit_badrecord(args[0]);
  break;
}

case op_bif_bit_size_bjsd: {
  emit_bif_bit_size(args[0], args[1], args[2], args[3]);
  break;
}

case op_bif_byte_size_bjsd: {
  emit_bif_byte_size(args[0], args[1], args[2], args[3]);
  break;
}

case op_bif_element_jssd: {
  emit_bif_element(args[0], args[1], args[2], args[3]);
  break;
}

case op_bif_hd_sd: {
  emit_bif_hd(args[0], args[1]);
  break;
}

case op_bif_is_eq_exact_Ssd: {
  emit_bif_is_eq_exact(args[0], args[1], args[2]);
  break;
}

case op_bif_is_ge_ssd: {
  emit_bif_is_ge(args[0], args[1], args[2]);
  break;
}

case op_bif_is_lt_ssd: {
  emit_bif_is_lt(args[0], args[1], args[2]);
  break;
}

case op_bif_is_map_key_bjssd: {
  emit_bif_is_map_key(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_bif_is_ne_exact_Ssd: {
  emit_bif_is_ne_exact(args[0], args[1], args[2]);
  break;
}

case op_bif_map_get_jssd: {
  emit_bif_map_get(args[0], args[1], args[2], args[3]);
  break;
}

case op_bif_map_size_jsd: {
  emit_bif_map_size(args[0], args[1], args[2]);
  break;
}

case op_bif_max_ssd: {
  emit_bif_max(args[0], args[1], args[2]);
  break;
}

case op_bif_min_ssd: {
  emit_bif_min(args[0], args[1], args[2]);
  break;
}

case op_bif_node_jSd: {
  emit_bif_node(args[0], args[1], args[2]);
  break;
}

case op_bif_tuple_size_bjSd: {
  emit_bif_tuple_size(args[0], args[1], args[2], args[3]);
  break;
}

case op_bs_add_jsstx: {
  emit_bs_add(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_bs_get_integer2_fStsttd: {
  emit_bs_get_integer2(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
  break;
}

case op_bs_get_tail_Sdt: {
  emit_bs_get_tail(args[0], args[1], args[2]);
  break;
}

case op_bs_init_writable: {
  emit_bs_init_writable();
  break;
}

case op_bs_put_string_WM: {
  emit_bs_put_string(args[0], args[1]);
  break;
}

case op_bs_set_position_SS: {
  emit_bs_set_position(args[0], args[1]);
  break;
}

case op_bs_test_tail2_fSW: {
  emit_bs_test_tail2(args[0], args[1], args[2]);
  break;
}

case op_bs_test_unit_fSt: {
  emit_bs_test_unit(args[0], args[1], args[2]);
  break;
}

case op_build_stacktrace: {
  emit_build_stacktrace();
  break;
}

case op_call_bif_W: {
  emit_call_bif(args[0]);
  break;
}

case op_call_bif_mfa_aaI: {
  emit_call_bif_mfa(args[0], args[1], args[2]);
  break;
}

case op_call_error_handler: {
  emit_call_error_handler();
  break;
}

case op_call_light_bif_be: {
  emit_call_light_bif(args[0], args[1]);
  break;
}

case op_call_nif_WWW: {
  emit_call_nif(args[0], args[1], args[2]);
  break;
}

case op_case_end_s: {
  emit_case_end(args[0]);
  break;
}

case op_catch_end_y: {
  emit_catch_end(args[0]);
  break;
}

case op_catch_yf: {
  emit_catch(args[0], args[1]);
  break;
}

case op_continue_exit: {
  emit_continue_exit();
  break;
}

case op_deallocate_t: {
  emit_deallocate(args[0]);
  break;
}

case op_empty_func_line: {
  emit_empty_func_line();
  break;
}

case op_fconv_sl: {
  emit_fconv(args[0], args[1]);
  break;
}

case op_fload_Sl: {
  emit_fload(args[0], args[1]);
  break;
}

case op_fload_ql: {
  emit_fload(args[0], args[1]);
  break;
}

case op_fstore_ld: {
  emit_fstore(args[0], args[1]);
  break;
}

case op_func_line_I: {
  emit_func_line(args[0]);
  break;
}

case op_get_hd_Sd: {
  emit_get_hd(args[0], args[1]);
  break;
}

case op_get_list_Sdd: {
  emit_get_list(args[0], args[1], args[2]);
  break;
}

case op_get_tl_Sd: {
  emit_get_tl(args[0], args[1]);
  break;
}

case op_get_tuple_element_swap_sPdd: {
  emit_get_tuple_element_swap(args[0], args[1], args[2], args[3]);
  break;
}

case op_get_two_tuple_elements_sPSS: {
  emit_get_two_tuple_elements(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_apply: {
  emit_i_apply();
  break;
}

case op_i_apply_fun: {
  emit_i_apply_fun();
  break;
}

case op_i_apply_fun_last_t: {
  emit_i_apply_fun_last(args[0]);
  break;
}

case op_i_apply_fun_only: {
  emit_i_apply_fun_only();
  break;
}

case op_i_apply_last_t: {
  emit_i_apply_last(args[0]);
  break;
}

case op_i_apply_only: {
  emit_i_apply_only();
  break;
}

case op_i_band_ssjd: {
  emit_i_band(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bif1_sjbd: {
  emit_i_bif1(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bif2_ssjbd: {
  emit_i_bif2(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_bif3_sssjbd: {
  emit_i_bif3(args[0], args[1], args[2], args[3], args[4], args[5]);
  break;
}

case op_i_bnot_jsd: {
  emit_i_bnot(args[0], args[1], args[2]);
  break;
}

case op_i_bor_jssd: {
  emit_i_bor(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_breakpoint_trampoline: {
  emit_i_breakpoint_trampoline();
  break;
}

case op_i_bs_append_jIttssS: {
  emit_i_bs_append(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
  break;
}

case op_i_bs_create_bin_jItd: {
  emit_i_bs_create_bin(args[0], args[1], args[2], args[3], args.subspan(4,args.size() - 4));
  break;
}

case op_i_bs_get_binary2_Sftstd: {
  emit_i_bs_get_binary2(args[0], args[1], args[2], args[3], args[4], args[5]);
  break;
}

case op_i_bs_get_binary_all2_Sfttd: {
  emit_i_bs_get_binary_all2(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_bs_get_float2_Sftstd: {
  emit_i_bs_get_float2(args[0], args[1], args[2], args[3], args[4], args[5]);
  break;
}

case op_i_bs_get_position_SS: {
  emit_i_bs_get_position(args[0], args[1]);
  break;
}

case op_i_bs_get_utf16_Sftd: {
  emit_i_bs_get_utf16(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bs_get_utf8_Sfd: {
  emit_i_bs_get_utf8(args[0], args[1], args[2]);
  break;
}

case op_i_bs_init_WtS: {
  emit_i_bs_init(args[0], args[1], args[2]);
  break;
}

case op_i_bs_init_bits_WtS: {
  emit_i_bs_init_bits(args[0], args[1], args[2]);
  break;
}

case op_i_bs_init_bits_fail_SjtS: {
  emit_i_bs_init_bits_fail(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bs_init_bits_fail_heap_sIjtS: {
  emit_i_bs_init_bits_fail_heap(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_bs_init_bits_heap_WItS: {
  emit_i_bs_init_bits_heap(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bs_init_fail_SjtS: {
  emit_i_bs_init_fail(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bs_init_fail_heap_sIjtS: {
  emit_i_bs_init_fail_heap(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_bs_init_heap_WItS: {
  emit_i_bs_init_heap(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bs_match_fS: {
  emit_i_bs_match(args[0], args[1], args.subspan(2,args.size() - 2));
  break;
}

case op_i_bs_match_string_SfWM: {
  emit_i_bs_match_string(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bs_match_test_heap_fSIt: {
  emit_i_bs_match_test_heap(args[0], args[1], args[2], args[3], args.subspan(4,args.size() - 4));
  break;
}

case op_i_bs_private_append_jtsSx: {
  emit_i_bs_private_append(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_bs_put_utf16_jts: {
  emit_i_bs_put_utf16(args[0], args[1], args[2]);
  break;
}

case op_i_bs_put_utf8_js: {
  emit_i_bs_put_utf8(args[0], args[1]);
  break;
}

case op_i_bs_skip_bits2_SSft: {
  emit_i_bs_skip_bits2(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bs_skip_bits_imm2_fSW: {
  emit_i_bs_skip_bits_imm2(args[0], args[1], args[2]);
  break;
}

case op_i_bs_skip_utf16_Sft: {
  emit_i_bs_skip_utf16(args[0], args[1], args[2]);
  break;
}

case op_i_bs_skip_utf8_Sf: {
  emit_i_bs_skip_utf8(args[0], args[1]);
  break;
}

case op_i_bs_start_match3_Stjd: {
  emit_i_bs_start_match3(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bs_utf16_size_sx: {
  emit_i_bs_utf16_size(args[0], args[1]);
  break;
}

case op_i_bs_utf8_size_sx: {
  emit_i_bs_utf8_size(args[0], args[1]);
  break;
}

case op_i_bs_validate_unicode_js: {
  emit_i_bs_validate_unicode(args[0], args[1]);
  break;
}

case op_i_bs_validate_unicode_retract_jsS: {
  emit_i_bs_validate_unicode_retract(args[0], args[1], args[2]);
  break;
}

case op_i_bsl_ssjd: {
  emit_i_bsl(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bsr_ssjd: {
  emit_i_bsr(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_bxor_jssd: {
  emit_i_bxor(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_call_ext_e: {
  emit_i_call_ext(args[0]);
  break;
}

case op_i_call_ext_last_et: {
  emit_i_call_ext_last(args[0], args[1]);
  break;
}

case op_i_call_ext_only_e: {
  emit_i_call_ext_only(args[0]);
  break;
}

case op_i_call_f: {
  emit_i_call(args[0]);
  break;
}

case op_i_call_fun2_FtS: {
  emit_i_call_fun2(args[0], args[1], args[2]);
  break;
}

case op_i_call_fun2_atS: {
  emit_i_call_fun2(args[0], args[1], args[2]);
  break;
}

case op_i_call_fun2_last_FtSt: {
  emit_i_call_fun2_last(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_call_fun2_last_atSt: {
  emit_i_call_fun2_last(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_call_fun_last_tt: {
  emit_i_call_fun_last(args[0], args[1]);
  break;
}

case op_i_call_fun_t: {
  emit_i_call_fun(args[0]);
  break;
}

case op_i_call_last_ft: {
  emit_i_call_last(args[0], args[1]);
  break;
}

case op_i_call_on_load_function: {
  emit_i_call_on_load_function();
  break;
}

case op_i_call_only_f: {
  emit_i_call_only(args[0]);
  break;
}

case op_i_call_trace_return: {
  emit_i_call_trace_return();
  break;
}

case op_i_debug_breakpoint: {
  emit_i_debug_breakpoint();
  break;
}

case op_i_div_rem_ssjdd: {
  emit_i_div_rem(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_fadd_lll: {
  emit_i_fadd(args[0], args[1], args[2]);
  break;
}

case op_i_fdiv_lll: {
  emit_i_fdiv(args[0], args[1], args[2]);
  break;
}

case op_i_fmul_lll: {
  emit_i_fmul(args[0], args[1], args[2]);
  break;
}

case op_i_fnegate_ll: {
  emit_i_fnegate(args[0], args[1]);
  break;
}

case op_i_fsub_lll: {
  emit_i_fsub(args[0], args[1], args[2]);
  break;
}

case op_i_func_info_IaaI: {
  emit_i_func_info(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_generic_breakpoint: {
  emit_i_generic_breakpoint();
  break;
}

case op_i_get_hash_cId: {
  emit_i_get_hash(args[0], args[1], args[2]);
  break;
}

case op_i_get_map_element_fSSS: {
  emit_i_get_map_element(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_get_map_element_hash_fScIS: {
  emit_i_get_map_element_hash(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_get_map_elements_fsI: {
  emit_i_get_map_elements(args[0], args[1], args[2], args.subspan(3,args.size() - 3));
  break;
}

case op_i_get_sd: {
  emit_i_get(args[0], args[1]);
  break;
}

case op_i_get_tuple_element_sPS: {
  emit_i_get_tuple_element(args[0], args[1], args[2]);
  break;
}

case op_i_hibernate: {
  emit_i_hibernate();
  break;
}

case op_i_int_div_jssd: {
  emit_i_int_div(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_is_tagged_tuple_ff_ffsAa: {
  emit_i_is_tagged_tuple_ff(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_is_tagged_tuple_fsAa: {
  emit_i_is_tagged_tuple(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_is_tuple_fs: {
  emit_i_is_tuple(args[0], args[1]);
  break;
}

case op_i_is_tuple_of_arity_fsA: {
  emit_i_is_tuple_of_arity(args[0], args[1], args[2]);
  break;
}

case op_i_jump_on_val_sfWI: {
  emit_i_jump_on_val(args[0], args[1], args[2], args[3], args.subspan(4,args.size() - 4));
  break;
}

case op_i_jump_on_val_snWI: {
  emit_i_jump_on_val(args[0], args[1], args[2], args[3], args.subspan(4,args.size() - 4));
  break;
}

case op_i_lambda_error_t: {
  emit_i_lambda_error(args[0]);
  break;
}

case op_i_lambda_trampoline_FfWW: {
  emit_i_lambda_trampoline(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_length_jtd: {
  emit_i_length(args[0], args[1], args[2]);
  break;
}

case op_i_length_setup_jts: {
  emit_i_length_setup(args[0], args[1], args[2]);
  break;
}

case op_i_load_nif: {
  emit_i_load_nif();
  break;
}

case op_i_loop_rec_f: {
  emit_i_loop_rec(args[0]);
  break;
}

case op_i_m_div_jssd: {
  emit_i_m_div(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_make_fun3_FStt: {
  emit_i_make_fun3(args[0], args[1], args[2], args[3], args.subspan(4,args.size() - 4));
  break;
}

case op_i_minus_ssjd: {
  emit_i_minus(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_move_sd: {
  emit_i_move(args[0], args[1]);
  break;
}

case op_i_new_bs_put_binary_all_sjt: {
  emit_i_new_bs_put_binary_all(args[0], args[1], args[2]);
  break;
}

case op_i_new_bs_put_binary_imm_jWs: {
  emit_i_new_bs_put_binary_imm(args[0], args[1], args[2]);
  break;
}

case op_i_new_bs_put_binary_jsts: {
  emit_i_new_bs_put_binary(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_new_bs_put_float_imm_jWts: {
  emit_i_new_bs_put_float_imm(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_new_bs_put_float_jSts: {
  emit_i_new_bs_put_float(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_new_bs_put_integer_imm_sjWt: {
  emit_i_new_bs_put_integer_imm(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_new_bs_put_integer_jSts: {
  emit_i_new_bs_put_integer(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_new_small_map_lit_dtqI: {
  emit_i_new_small_map_lit(args[0], args[1], args[2], args[3], args.subspan(4,args.size() - 4));
  break;
}

case op_i_nif_padding: {
  emit_i_nif_padding();
  break;
}

case op_i_perf_counter: {
  emit_i_perf_counter();
  break;
}

case op_i_plus_ssjd: {
  emit_i_plus(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_recv_mark: {
  emit_i_recv_mark();
  break;
}

case op_i_recv_set: {
  emit_i_recv_set();
  break;
}

case op_i_rem_div_ssjdd: {
  emit_i_rem_div(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_i_rem_ssjd: {
  emit_i_rem(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_return_to_trace: {
  emit_i_return_to_trace();
  break;
}

case op_i_select_tuple_arity_SfI: {
  emit_i_select_tuple_arity(args[0], args[1], args[2], args.subspan(3,args.size() - 3));
  break;
}

case op_i_select_val_bins_sfI: {
  emit_i_select_val_bins(args[0], args[1], args[2], args.subspan(3,args.size() - 3));
  break;
}

case op_i_select_val_bins_snI: {
  emit_i_select_val_bins(args[0], args[1], args[2], args.subspan(3,args.size() - 3));
  break;
}

case op_i_select_val_lins_sfI: {
  emit_i_select_val_lins(args[0], args[1], args[2], args.subspan(3,args.size() - 3));
  break;
}

case op_i_select_val_lins_snI: {
  emit_i_select_val_lins(args[0], args[1], args[2], args.subspan(3,args.size() - 3));
  break;
}

case op_i_test_arity_fsA: {
  emit_i_test_arity(args[0], args[1], args[2]);
  break;
}

case op_i_test_yield: {
  emit_i_test_yield();
  break;
}

case op_i_times_jssd: {
  emit_i_times(args[0], args[1], args[2], args[3]);
  break;
}

case op_i_trim_t: {
  emit_i_trim(args[0]);
  break;
}

case op_i_unary_minus_sjd: {
  emit_i_unary_minus(args[0], args[1], args[2]);
  break;
}

case op_i_validate_t: {
  emit_i_validate(args[0]);
  break;
}

case op_i_yield: {
  emit_i_yield();
  break;
}

case op_if_end: {
  emit_if_end();
  break;
}

case op_init_y: {
  emit_init(args[0]);
  break;
}

case op_init_yregs_I: {
  emit_init_yregs(args[0], args.subspan(1,args.size() - 1));
  break;
}

case op_int_code_end: {
  emit_int_code_end();
  break;
}

case op_is_atom_fs: {
  emit_is_atom(args[0], args[1]);
  break;
}

case op_is_binary_fs: {
  emit_is_binary(args[0], args[1]);
  break;
}

case op_is_bitstring_fs: {
  emit_is_bitstring(args[0], args[1]);
  break;
}

case op_is_boolean_fs: {
  emit_is_boolean(args[0], args[1]);
  break;
}

case op_is_eq_exact_fss: {
  emit_is_eq_exact(args[0], args[1], args[2]);
  break;
}

case op_is_eq_fss: {
  emit_is_eq(args[0], args[1], args[2]);
  break;
}

case op_is_float_fs: {
  emit_is_float(args[0], args[1]);
  break;
}

case op_is_function2_fss: {
  emit_is_function2(args[0], args[1], args[2]);
  break;
}

case op_is_function_fS: {
  emit_is_function(args[0], args[1]);
  break;
}

case op_is_ge_fss: {
  emit_is_ge(args[0], args[1], args[2]);
  break;
}

case op_is_ge_ge_ffScc: {
  emit_is_ge_ge(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_is_ge_lt_ffScc: {
  emit_is_ge_lt(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_is_in_range_ffScc: {
  emit_is_in_range(args[0], args[1], args[2], args[3], args[4]);
  break;
}

case op_is_int_ge_fSc: {
  emit_is_int_ge(args[0], args[1], args[2]);
  break;
}

case op_is_int_in_range_fScc: {
  emit_is_int_in_range(args[0], args[1], args[2], args[3]);
  break;
}

case op_is_integer_fs: {
  emit_is_integer(args[0], args[1]);
  break;
}

case op_is_list_fs: {
  emit_is_list(args[0], args[1]);
  break;
}

case op_is_lt_fss: {
  emit_is_lt(args[0], args[1], args[2]);
  break;
}

case op_is_map_fs: {
  emit_is_map(args[0], args[1]);
  break;
}

case op_is_ne_exact_fss: {
  emit_is_ne_exact(args[0], args[1], args[2]);
  break;
}

case op_is_ne_fss: {
  emit_is_ne(args[0], args[1], args[2]);
  break;
}

case op_is_nil_fS: {
  emit_is_nil(args[0], args[1]);
  break;
}

case op_is_nonempty_list_fS: {
  emit_is_nonempty_list(args[0], args[1]);
  break;
}

case op_is_nonempty_list_get_hd_fSd: {
  emit_is_nonempty_list_get_hd(args[0], args[1], args[2]);
  break;
}

case op_is_nonempty_list_get_list_fSdd: {
  emit_is_nonempty_list_get_list(args[0], args[1], args[2], args[3]);
  break;
}

case op_is_nonempty_list_get_tl_fSd: {
  emit_is_nonempty_list_get_tl(args[0], args[1], args[2]);
  break;
}

case op_is_number_fs: {
  emit_is_number(args[0], args[1]);
  break;
}

case op_is_pid_fs: {
  emit_is_pid(args[0], args[1]);
  break;
}

case op_is_port_fs: {
  emit_is_port(args[0], args[1]);
  break;
}

case op_is_reference_fs: {
  emit_is_reference(args[0], args[1]);
  break;
}

case op_jump_f: {
  emit_jump(args[0]);
  break;
}

case op_label_L: {
  emit_label(args[0]);
  break;
}

case op_line_I: {
  emit_line(args[0]);
  break;
}

case op_load_tuple_ptr_s: {
  emit_load_tuple_ptr(args[0]);
  break;
}

case op_loop_rec_end_f: {
  emit_loop_rec_end(args[0]);
  break;
}

case op_move_two_words_sdsd: {
  emit_move_two_words(args[0], args[1], args[2], args[3]);
  break;
}

case op_new_map_dtI: {
  emit_new_map(args[0], args[1], args[2], args.subspan(3,args.size() - 3));
  break;
}

case op_nif_start: {
  emit_nif_start();
  break;
}

case op_node_d: {
  emit_node(args[0]);
  break;
}

case op_nofail_bif1_sbd: {
  emit_nofail_bif1(args[0], args[1], args[2]);
  break;
}

case op_nofail_bif2_ssbd: {
  emit_nofail_bif2(args[0], args[1], args[2], args[3]);
  break;
}

case op_normal_exit: {
  emit_normal_exit();
  break;
}

case op_on_load: {
  emit_on_load();
  break;
}

case op_put_cons_ss: {
  emit_put_cons(args[0], args[1]);
  break;
}

case op_put_tuple2_SA: {
  emit_put_tuple2(args[0], args[1], args.subspan(2,args.size() - 2));
  break;
}

case op_raise_ss: {
  emit_raise(args[0], args[1]);
  break;
}

case op_raw_raise: {
  emit_raw_raise();
  break;
}

case op_recv_marker_bind_SS: {
  emit_recv_marker_bind(args[0], args[1]);
  break;
}

case op_recv_marker_clear_S: {
  emit_recv_marker_clear(args[0]);
  break;
}

case op_recv_marker_reserve_S: {
  emit_recv_marker_reserve(args[0]);
  break;
}

case op_recv_marker_use_S: {
  emit_recv_marker_use(args[0]);
  break;
}

case op_remove_message: {
  emit_remove_message();
  break;
}

case op_return: {
  emit_return();
  break;
}

case op_return_trace: {
  emit_return_trace();
  break;
}

case op_self_d: {
  emit_self(args[0]);
  break;
}

case op_send: {
  emit_send();
  break;
}

case op_set_tuple_element_sSP: {
  emit_set_tuple_element(args[0], args[1], args[2]);
  break;
}

case op_store_cons_Id: {
  emit_store_cons(args[0], args[1]);
  break;
}

case op_swap_dd: {
  emit_swap(args[0], args[1]);
  break;
}

case op_system_limit_body: {
  emit_system_limit_body();
  break;
}

case op_test_heap_It: {
  emit_test_heap(args[0], args[1]);
  break;
}

case op_timeout: {
  emit_timeout();
  break;
}

case op_timeout_locked: {
  emit_timeout_locked();
  break;
}

case op_trace_jump_W: {
  emit_trace_jump(args[0]);
  break;
}

case op_try_case_end_s: {
  emit_try_case_end(args[0]);
  break;
}

case op_try_case_y: {
  emit_try_case(args[0]);
  break;
}

case op_try_end_y: {
  emit_try_end(args[0]);
  break;
}

case op_update_map_assoc_sdtI: {
  emit_update_map_assoc(args[0], args[1], args[2], args[3], args.subspan(4,args.size() - 4));
  break;
}

case op_update_map_exact_sjdtI: {
  emit_update_map_exact(args[0], args[1], args[2], args[3], args[4], args.subspan(5,args.size() - 5));
  break;
}

case op_update_record_aIsdI: {
  emit_update_record(args[0], args[1], args[2], args[3], args[4], args.subspan(5,args.size() - 5));
  break;
}

case op_wait_locked_f: {
  emit_wait_locked(args[0]);
  break;
}

case op_wait_timeout_locked_sf: {
  emit_wait_timeout_locked(args[0], args[1]);
  break;
}

case op_wait_timeout_unlocked_sf: {
  emit_wait_timeout_unlocked(args[0], args[1]);
  break;
}

case op_wait_unlocked_f: {
  emit_wait_unlocked(args[0]);
  break;
}

